# Changelog
All notable changes to this project will be documented in this file.

## [1.0] - 2019-04-24
### Added
- #24: Created ee.taltech.cs.mbt.tdl.expression.grammar; an ANTLR parser/lexer for TDL<sup>TP</sup>.
- #24: Simplified component documentation folder structure.
- #24: Added IntelliJ fluff to .gitignore.
- #25: Created ee.taltech.cs.mbt.tdl.expression.model:
    Can be used to decouple higher level logic from ANTLR generated code
- #26: Created ee.taltech.cs.mbt.tdl.expression.grammar_facade.
- #31: Created ee.taltech.cs.mbt.tdl.commons.utils.
- #31: Created ee.taltech.cs.mbt.tdl.commons.facades.antlr_facade (from ee.taltech.cs.mbt.tdl.expression.grammar_facade):
    Interface simplification library for ANTLR-generated lexers/parsers.
- #31: Created ee.taltech.cs.mbt.tdl.commons.st_facade:
    Interface simplification library for StringTemplate-based code generation.
    Object model for representing TDL(TP) expression trees.
- #31: Created ee.taltech.cs.mbt.tdl.expression.tdl_parser:
    Parser implementation for TDP(TP) expressions (based on tdl_grammar and antlr_facade).
- #31: Created ee.taltech.cs.mbt.tdl.uppaal.model:
    Object model for representing UPPAAL (UTA) systems.
- #31: Created ee.taltech.cs.mbt.tdl.uppaal.grammar:
    ANTLR4 grammar for UTA's declaration language.
- #31: Created ee.taltech.cs.mbt.tdl.uppaal.uta_parser:
    Parser implementation for UTA systems (based on uppaal_grammar, antlr_facade and xjc).
- #31: Created ee.taltech.cs.mbt.tdl.uppaal.uta_pickler_plugin:
    Maven plugin for generating uppaal.model-based Java factory class source code from UTA XML files.
- #31: Created ee.taltech.cs.mbt.tdl.scenario.scenario_composer:
    Contains logic for applying a TDL expression object to a UTA model object in order to produce a scenario object model.
- #31: Created ee.taltech.cs.mbt.tdl.interpreter.interpreter_core:
    Core logic for client TDL(TP) interpreters.
- #31: Created ee.taltech.cs.mbt.tdl.interpreter.interpreter_cli:
    CLI TDL(TP) interpreter.
- #31: Created ee.taltech.cs.mbt.tdl.parent_bom:
    Maven Bill of Materials for the project.
- #31: Created ee.taltech.cs.mbt.tdl.parent_pom:
    Maven parent POM for the project.

### Changed
- #26: Use composition instead of an interface-based hack for a convenient operand contract for clients in ee.taltech.cs.mbt.tdl.expression.model.
- #27: Fix errors in ee.taltech.cs.mbt.tdl.expression.grammar.
- #31: Refactored ee.taltech.cs.mbt.tdl.expression.grammar into ee.taltech.cs.mbt.tdl.expression.tdl_grammar.
- #31: Refactored ee.taltech.cs.mbt.tdl.expression.model into ee.taltech.cs.mbt.tdl.expression.tdl_model.

### Removed
- #26: Removed ee.taltech.cs.mbt.tdl.expression.parser.

## [1.5] - 2019-05-??
### Added
- #58: Support for checked normalization exceptions (NormalizationException).
- #58: Support for checked literal elimination exceptions (LiteralEliminationException).
- #58: TdlTrivialTrueRecognizer.
- #58: TdlTrivialFalseRecognizer.
- #60: Added custom args4j option StringOrFile.
- #66: Added parser/generator for a limited version of S-Expressions:
    * s-expression-model;
    * s-expression-grammar;
    * s-expression-parser.
- #66: Added artifact for organizing test utilities: test-utils.
- #66: Additional utilities added to commons.utils.
- #66: Added positive test cases for TDL(TP) parser (TdlExpressionParserValidSyntaxTests).
- #66: Added positive test cases for TDL(TP) code generator (TdlExpressionGeneratorValidStructureTests).
- #67: Added positive test cases for UPPAAL system definition language parser (UtaLanguageParserTests).

### Removed
- #58: Logic for TdlTerminatorAdapter.
- #58: Iteration of ScenarioWrapperConstructionContext.getGloballyApplicableTransitionSynchs() in ScenarioSystemComposer.compose().

### Changed
- #58: Fixed incorrect usage of GroupNormalizingReducer in ExpressionNormalizer.
- #58: Use hyphens in all artifact names (seems to be a common practice in Maven projects).
- #58: Fix TDL grammar (matches original BNF more closely now).
- #58: "linked pair trapset" is actually "linked pairs trapset".
- #58: Add getHumanReadableNames() to TDL expression node objects.
- #58: Semantics of boolean literals in TDL expressions has changed (they now represent "instant" truth).
- #58: TDL ChildContainer: relax rules in replaceChild() (support for object identity checking).
- #58: A({}) -> True; E({}) -> False.
- #58: Deprecate ScenarioSystemComposer.processGloballyApplicableTransitionSynch().
- #60: -e|--expression in CLI to support **both** file path strings and TDL<sup>TP</sup> expression strings.
- #66: Moved added 'facade' qualifier to facade artifact groupIds.
- #66: Fix TDL code generation logic:
    * negation, group now printed as-is;
    * removed redundant parentheses added for bounded repetition.
- #66: Maven plugins no longer duplicated for child project POMs unless overrides are required.
- #67: (out of scope) Fixed TDL grammar (match original BNF more closely).
- #67: (out of scope) Changed package structure for general facade modules.
- #67: (out of scope) Changed package structure in scenario composer.
- #70: Fixed ClassCastException issue in BaseBooleanNodeVisitor|ExpressionNormalizer.
- #70: Generated TDL(TP) code should match TDL(TP) grammar.
- #70: Fixed logic error in time bounded leads to recognizer template.
- #70: Display warning when expression has been fully reduced.
- #70: Fixed several issues related to extracting and evaluating linked trapsets.
- #70: Fixed logic error in TdlExpression.replaceDescendant().
- #70: Fixed semantics of linked pairs - value should be retained in trapset when trap has been visited.
- #70: Auto-group negated subexpressions when presenting reduction results to user.
