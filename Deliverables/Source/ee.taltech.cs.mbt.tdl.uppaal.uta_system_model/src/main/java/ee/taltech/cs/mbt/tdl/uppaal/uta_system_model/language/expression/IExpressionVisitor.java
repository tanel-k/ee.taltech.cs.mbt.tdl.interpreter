package ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression;

import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.access.ArrayLookupExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.arithmetic.*;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.binary.*;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.hybrid.PostfixDecrementExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.hybrid.PostfixIncrementExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.hybrid.PrefixDecrementExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.hybrid.PrefixIncrementExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.literals.KeywordLiteral;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.literals.NaturalNumberLiteral;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.logical.*;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.logical.inequality.GTEExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.logical.inequality.GreaterThanExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.logical.inequality.LTEExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.logical.inequality.LessThanExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.logical.phrasal.PhrasalConjunctionExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.logical.phrasal.PhrasalDisjunctionExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.logical.phrasal.PhrasalImplicationExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.logical.phrasal.PhrasalNegation;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.logical.quantification.QuantificationExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.misc.*;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.categories.structural.GroupedExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.expression.generic.AssignmentWrapper;

public interface IExpressionVisitor<T> {
	T visitArrayLookup(ArrayLookupExpression expr);
	T visitAddition(AdditionExpression expr);
	T visitDivision(DivisionExpression expr);
	T visitMaximum(MaximumExpression expr);
	T visitMinimum(MinimumExpression expr);
	T visitModulo(ModuloExpression modulo);
	T visitMultiplication(MultiplicationExpression expr);
	T visitAdditiveInverse(AdditiveInverseExpression expr);
	T visitAdditiveIdentity(AdditiveIdentityExpression expr);
	T visitSubtraction(SubtractionExpression expr);
	T visitBitwiseAnd(BitwiseAndExpression expr);
	T visitBitwiseExclusiveOr(BitwiseExclusiveOrExpression expr);
	T visitBitwiseOr(BitwiseOrExpression expr);
	T visitLeftShift(LeftShiftExpression expr);
	T visitRightShift(RightShiftExpression expr);
	T visitPostfixDecrement(PostfixDecrementExpression expr);
	T visitPostfixIncrement(PostfixIncrementExpression expr);
	T visitPrefixDecrement(PrefixDecrementExpression expr);
	T visitPrefixIncrement(PrefixIncrementExpression expr);
	T visitKeyword(KeywordLiteral expr);
	T visitNaturalNumber(NaturalNumberLiteral expr);
	T visitGroup(GroupedExpression expr);
	T visitAssignment(AssignmentExpression expr);
	T visitCall(CallExpression expr);
	T visitIdentifierRef(IdentifierRefExpression expr);
	T visitIfElse(IfElseExpression expr);
	T visitNegation(NegationExpression expr);
	T visitEquality(EqualityExpression expr);
	T visitDisjunction(DisjunctionExpression expr);
	T visitConjunction(ConjunctionExpression expr);
	T visitQuantification(QuantificationExpression expr);
	T visitFieldAccess(FieldAccessExpression expr);
	T visitGreaterThan(GreaterThanExpression expr);
	T visitLessThan(LessThanExpression expr);
	T visitGTE(GTEExpression expr);
	T visitLTE(LTEExpression expr);
	T visitPhrasalConjunction(PhrasalConjunctionExpression expr);
	T visitPhrasalDisjunction(PhrasalDisjunctionExpression expr);
	T visitPhrasalImplication(PhrasalImplicationExpression expr);
	T visitPhrasalNegation(PhrasalNegation expr);
	T visitAssignmentWrapper(AssignmentWrapper expr);
	T visitInequality(InequalityExpression expr);
}
