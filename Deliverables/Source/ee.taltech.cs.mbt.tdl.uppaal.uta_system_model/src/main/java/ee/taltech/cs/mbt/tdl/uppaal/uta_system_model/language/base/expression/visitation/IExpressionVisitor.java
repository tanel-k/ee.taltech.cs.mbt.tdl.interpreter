package ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.visitation;

import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.access.ArrayLookupExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.arithmetic.*;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.binary.*;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.hybrid.PostfixDecrementExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.hybrid.PostfixIncrementExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.hybrid.PrefixDecrementExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.hybrid.PrefixIncrementExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.literals.KeywordLiteral;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.literals.NaturalNumberLiteral;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.logical.*;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.logical.inequality.GTEExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.logical.inequality.GreaterThanExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.logical.inequality.LTEExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.logical.inequality.LessThanExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.logical.phrasal.PhrasalConjunctionExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.logical.phrasal.PhrasalDisjunctionExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.logical.phrasal.PhrasalImplicationExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.logical.phrasal.PhrasalNegation;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.logical.quantification.QuantificationExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.misc.*;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.categories.structural.GroupedExpression;
import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language.base.expression.generic.AssignmentWrapper;

public interface IExpressionVisitor<T> {
	T visitArrayLookup(ArrayLookupExpression arrayLookup);
	T visitAddition(AdditionExpression addition);
	T visitDivision(DivisionExpression division);
	T visitMaximum(MaximumExpression maximum);
	T visitMinimum(MinimumExpression minimum);
	T visitModulo(ModuloExpression modulo);
	T visitMultiplication(MultiplicationExpression multiplication);
	T visitAdditiveInverse(AdditiveInverseExpression negative);
	T visitAdditiveIdentity(AdditiveIdentityExpression positive);
	T visitSubtraction(SubtractionExpression subtraction);
	T visitBitwiseAnd(BitwiseAndExpression bitwiseAnd);
	T visitBitwiseExclusiveOr(BitwiseExclusiveOrExpression bitwiseExclusiveOr);
	T visitBitwiseOr(BitwiseOrExpression bitwiseOr);
	T visitLeftShift(LeftShiftExpression leftShift);
	T visitRightShift(RightShiftExpression rightShift);
	T visitPostfixDecrement(PostfixDecrementExpression postfixDecrement);
	T visitPostfixIncrement(PostfixIncrementExpression postfixIncrement);
	T visitPrefixDecrement(PrefixDecrementExpression prefixDecrement);
	T visitPrefixIncrement(PrefixIncrementExpression prefixIncrement);
	T visitKeyword(KeywordLiteral keyword);
	T visitNaturalNumber(NaturalNumberLiteral number);
	T visitGroup(GroupedExpression group);
	T visitAssignment(AssignmentExpression assignment);
	T visitCall(CallExpression call);
	T visitIdentifierRef(IdentifierRefExpression identifierRef);
	T visitIfElse(IfElseExpression ifElseTernary);
	T visitNegation(NegationExpression negation);
	T visitEquality(EqualityExpression equality);
	T visitDisjunction(DisjunctionExpression disjunction);
	T visitConjunction(ConjunctionExpression conjunction);
	T visitQuantification(QuantificationExpression quantification);
	T visitFieldAccess(FieldAccessExpression fieldAccess);
	T visitGreaterThan(GreaterThanExpression greaterThan);
	T visitLessThan(LessThanExpression lessThan);
	T visitGTE(GTEExpression greaterThanOrEqual);
	T visitLTE(LTEExpression lessThanOrEqual);
	T visitPhrasalConjunction(PhrasalConjunctionExpression conjunction);
	T visitPhrasalDisjunction(PhrasalDisjunctionExpression disjunction);
	T visitPhrasalImplication(PhrasalImplicationExpression implication);
	T visitPhrasalNegation(PhrasalNegation negation);
	T visitAssignmentWrapper(AssignmentWrapper assignmentWrapper);
	T visitInequality(InequalityExpression inequalityExpression);
}
