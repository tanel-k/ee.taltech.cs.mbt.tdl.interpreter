systemDefinition(ctx) ::=
<<
<if(ctx.declarations)><systemDeclarations(ctx.declarations)><endif>
<if(ctx.systemLine)><systemLine(ctx.systemLine)><endif>
<if(ctx.progressMeasure)><progressMeasureDeclaration(ctx.progressMeasure)><endif>
>>

systemDeclarations(iterable) ::= <%
    <iterable:systemDeclaration(); separator="\n">
%>

systemDeclaration(ctx) ::= <%
    <if(ctx.templateInstantiation)>
        <templateInstantiation(ctx)>
    <else>
        <declaration(ctx)>
    <endif>
%>

templateInstantiation(ctx) ::= <%
    <ctx.newName>
    <if(ctx.parameters)>(<parameters(ctx.parameters)>) = <else> = <endif>
    <ctx.originalName>(<arguments(ctx.arguments)>);
%>

systemLine(ctx) ::= <%
    system <ctx.processReferenceGroups:processReferenceGroup(); separator=" < ">
%>

processReferenceGroup(ctx) ::= <%
    <ctx.processReferences:processRef(); separator=", ">
%>

processRef(ctx) ::= <%
    <literal(ctx.identifierName)>
%>

progressMeasureDeclaration(ctx) ::=
<<progress {
    <ctx.expressions:progressExpression(); separator="\n">
}>>

progressExpression(ctx) ::= <%
    <expression(ctx)>;
%>

selections(iterable) ::= <%
    <iterable:selection(); separator=", ">
%>

selection(ctx) ::= <%
    <literal(ctx.identifierName)> : <type(ctx.type)>
%>

synchronization(ctx) ::= <%
    <if(ctx.active)>
        <expression(ctx.expression)>!
    <else>
        <expression(ctx.expression)>?
    <endif>
%>

assignments(iterable) ::= <%
    <iterable:expression(); separator=", ">
%>

declarations(iterable) ::= <%
    <iterable:declaration(); separator="\n">
%>

declaration(ctx) ::= <%
    <if(ctx.variable)>
        <variableDeclaration(ctx)>
    <elseif(ctx.type)>
        <typeDeclaration(ctx)>
    <elseif(ctx.function)>
        <functionDeclaration(ctx)>
    <elseif(ctx.channelPriority)>
        <channelPriorityDeclaration(ctx)>
    <endif>
%>

variableDeclaration(ctx) ::= <%
    <type(ctx.type)> <variableInitializations(ctx.variableInitializations)>;
%>

typeDeclaration(ctx) ::= <%
    typedef <type(ctx.type)> <identifierNameVariants(ctx.nameVariants)>;
%>

functionDeclaration(ctx) ::=
<<<functionType(ctx.valueType)> <literal(ctx.identifierName)>(<parameters(ctx.parameters)>) {
<if(ctx.declarations)>
    <declarations(ctx.declarations)>
<endif>
    <ctx.statments:statement()>
}
>>

parameters(iterable) ::= <%
    <iterable:parameter(); separator=", ">
%>

parameter(ctx) ::= <%
    <type(ctx.type)> <if(ctx.byReference)>&<endif><identifierNameVariant(ctx.nameVariant)>
%>

functionType(valueType) ::= <%
    <if(valueType)>
    <type(valueType)>
    <else>
    void
    <endif>
%>

channelPriorityDeclaration(ctx) ::= <%
    chan priority <channelPriorityExpression(ctx)>;
 %>

statement(ctx) ::= <%
    <if(ctx.block)>
        <blockStmt(ctx)>
    <elseif(ctx.expression)>
        <expressionStmt(ctx)>
    <elseif(ctx.forLoop)>
        <forStmt(ctx)>
    <elseif(ctx.iteration)>
        <iterationStmt(ctx)>
    <elseif(ctx.whileLoop)>
        <whileStmt(ctx)>
    <elseif(ctx.doWhileLoop)>
        <doWhileStmt(ctx)>
    <elseif(ctx.conditional)>
        <conditionalStmt(ctx)>
    <elseif(ctx.return)>
        <returnStmt(ctx)>
    <elseif(ctx.empty)>
        <emptyStmt(ctx)>
    <endif>
%>

blockStmt(ctx) ::=
<<{
<if(stmtCtx.declarations)>
    <declarations(ctx.declarations)>
<endif>
    <ctx.statements:statement()>
}>>

expressionStmt(ctx) ::= <%
    <expression(ctx.expression)>;
%>

forStmt(ctx) ::=
<<for (<expression(ctx.initializer)>; <expression(ctx.condition)>; <expression(ctx.update)>)
    <statment(ctx.statement)>
>>

iterationStmt(ctx) ::=
<<for (<literal(ctx.identifierName)> : <type(ctx.iteratedType)>)
    <statement(ctx.statement)>
>>

whileStmt(ctx) ::=
<<while (<expression(ctx.condition)>)
    <statement(ctx.statement)>
>>

doWhileStmt(ctx) ::=
<<do
    <statement(ctx.statement)>
while (<expression(ctx.condition)>);
>>

conditionalStmt(ctx) ::=
<<if (<expression(ctx.condition)>)
    <statement(ctx.primary)>
<if(ctx.alternative)>
else
    <statement(ctx.alternative)>
<endif>
>>


returnStmt(ctx) ::= <%
    return<if(ctx.expression)> <expression(ctx.expression)><endif>;
%>

emptyStmt(ctx) ::= ";"

expression(ctx) ::= <%
    <if(ctx.group)>
        (<expression(ctx.child)>)
    <elseif(ctx.arrayLookup)>
        <expression(ctx.leftChild)>[<expression(ctx.rightChild)>]
    <elseif(ctx.fieldAccess)>
        <expression(ctx.leftChild)>.<literal(ctx.identifierName)>
    <elseif(ctx.negation)>
        <if(ctx.phrasal)>
            not <expression(ctx.child)>
        <else>
            !<expression(ctx.child)>
        <endif>
    <elseif(ctx.conjunction)>
        <if(ctx.phrasal)>
            <expression(ctx.leftChild)> and <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> && <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.disjunction)>
        <if(ctx.phrasal)>
            <expression(ctx.leftChild)> or <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> || <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.prefixIncrement)>
        ++<expression(ctx.child)>
    <elseif(ctx.postfixIncrement)>
        <expression(ctx.child)>++
    <elseif(ctx.prefixDecrement)>
        --<expression(ctx.child)>
    <elseif(ctx.postfixDecrement)>
        <expression(ctx.child)>--
    <elseif(ctx.additiveInverse)>
        -<expression(ctx.child)>
    <elseif(ctx.additiveIdentity)>
        +<expression(ctx.child)>
    <elseif(ctx.multiplication)>
        <if(ctx.assignment)>
            <expression(ctx.leftChild)> *= <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> * <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.division)>
        <if(ctx.assignment)>
            <expression(ctx.leftChild)> /= <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> / <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.modulo)>
        <if(ctx.assignment)>
            <expression(ctx.leftChild)> %= <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> % <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.subtraction)>
        <if(ctx.assignment)>
            <expression(ctx.leftChild)> -= <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> - <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.addition)>
        <if(ctx.assignment)>
            <expression(ctx.leftChild)> += <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> + <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.leftShift)>
        <if(ctx.assignment)>
            <expression(ctx.leftChild)> \<\<= <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> \<\< <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.rightShift)>
        <if(ctx.assignment)>
            <expression(ctx.leftChild)> >>= <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> >> <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.max)>
        <expression(ctx.leftChild)> >? <expression(ctx.rightChild)>
    <elseif(ctx.min)>
        <expression(ctx.leftChild)> \<? <expression(ctx.rightChild)>
    <elseif(ctx.lessThan)>
        <expression(ctx.leftChild)> \< <expression(ctx.rightChild)>
    <elseif(ctx.lessThanOrEqual)>
        <expression(ctx.leftChild)> \<= <expression(ctx.rightChild)>
    <elseif(ctx.greaterThan)>
        <expression(ctx.leftChild)> > <expression(ctx.rightChild)>
    <elseif(ctx.greaterThanOrEqual)>
        <expression(ctx.leftChild)> >= <expression(ctx.rightChild)>
    <elseif(ctx.equality)>
        <expression(ctx.leftChild)> == <expression(ctx.rightChild)>
    <elseif(ctx.inequality)>
        <expression(ctx.leftChild)> != <expression(ctx.rightChild)>
    <elseif(ctx.bitwiseAnd)>
        <if(ctx.assignment)>
            <expression(ctx.leftChild)> &= <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> & <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.bitwiseXor)>
        <if(ctx.assignment)>
            <expression(ctx.leftChild)> ^= <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> ^ <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.bitwiseOr)>
        <if(ctx.assignment)>
            <expression(ctx.leftChild)> |= <expression(ctx.rightChild)>
        <else>
            <expression(ctx.leftChild)> | <expression(ctx.rightChild)>
        <endif>
    <elseif(ctx.ternary)>
        <expression(ctx.leftChild)> ? <expression(ctx.middleChild)> : <expression(ctx.rightChild)>
    <elseif(ctx.existentialQuantification)>
        exists (<literal(ctx.identifierName)> : <type(ctx.type)>) <expression(ctx.child)>
    <elseif(ctx.universalQuantification)>
        forall (<literal(ctx.identifierName)> : <type(ctx.type)>) <expression(ctx.child)>
    <elseif(ctx.assignment)>
        <expression(ctx.leftChild)> = <expression(ctx.rightChild)>
    <elseif(ctx.call)>
        <expression(ctx.child)>(<arguments(ctx.arguments)>)
    <elseif(ctx.literal)>
        <literal(ctx.literal)>
    <endif>
%>

literal(ctx) ::= <%
    <if(ctx.deadlock)>
        deadlock
    <elseif(ctx.trueLiteral)>
        true
    <elseif(ctx.falseLiteral)>
        false
    <elseif(ctx.number)>
        <ctx.numberValue>
    <elseif(ctx.identifierName)>
        <ctx.nameString>
    <endif>
%>

arguments(iterable) ::= <%
    <iterable:expression(); separator=", ">
%>

variableInitializations(iterable) ::= <%
    <iterable:variableInitialization(); separator=", ">
%>

variableInitialization(ctx) ::= <%
    <identifierNameVariant(ctx.nameVariant)>
    <if(ctx.initializer)> = <variableInitializer(ctx.initializer)><endif>
%>

variableInitializer(ctx) ::= <%
    <if(ctx.structured)>
        { <ctx.nestedInitializers:variableInitializer(); separator=", "> }
    <elseif(ctx.flat)>
        <expression(ctx.expression)>
    <endif>
%>

type(ctx) ::= <%
    <if(ctx.prefix)><typePrefix(ctx.prefix)> <endif>
    <typeIdentifier(ctx.identifier)>
%>

typePrefix(ctx) ::= <%
    <if(ctx.urgent)>
        urgent
    <elseif(ctx.broadcast)>
        broadcast
    <elseif(ctx.meta)>
        meta
    <elseif(ctx.constant)>
        const
    <endif>
%>

typeIdentifier(ctx) ::= <%
    <if(ctx.integer)>
        int
    <elseif(ctx.clock)>
        clock
    <elseif(ctx.channel)>
        chan
    <elseif(ctx.bool)>
        bool
    <elseif(ctx.boundedInteger)>
        int[<expression(ctx.minExpression)>,<expression(ctx.maxExpression)>]
    <elseif(ctx.scalar)>
        scalar { <expression(ctx.expression)> }
    <elseif(ctx.struct)>
        struct <fieldDeclarations(ctx.fieldDeclarations)>
    <elseif(ctx.variableBasedType)>
        <literal(ctx.identifierName)>
    <endif>
%>

fieldDeclarations(iterable) ::= <<{
    <iterable:fieldDeclaration(); separator="\n">
}
>>

fieldDeclaration(ctx) ::= <<
    <type(ctx.type)> <ctx.identifierNameVariants:identifierNameVariant()>;
>>

channelPriorityExpression(ctx) ::= <%
    <ctx.channelReferenceGroups:channelReferenceGroup(); separator=" < ">
%>

channelReferenceGroup(ctx) ::= <%
    <ctx.channelReferenceExpressions:channelReferenceExpression(); separator=", ">
%>

channelReferenceExpression(ctx) ::= <%
    <if(ctx.defaultPriority)>
        default
    <elseif(ctx.identifierName)>
        <literal(ctx.identifierName)>
    <elseif(ctx.arrayLookup)>
        <ctx.arrayLookupExpressions:arrayLookupExpression()>
    <endif>
%>

identifierNameVariants(iterable) ::= <%
    <iterable:identifierNameVariant(); separator=", ">
%>

identifierNameVariant(ctx) ::= <%
    <if(ctx.arrayIdentifier)>
        <literal(ctx.identifierName)><variantCtx.arraySizeModifiers:arraySizeModifier()>
    <elseif(ctx.baseIdentifier)>
        <literal(ctx.identifierName)>
    <endif>
%>

arrayLookupExpression(ctx) ::= <%
    [<expression(ctx)>]
%>

arraySizeModifier(ctx) ::= <%
    <if(ctx.sizeFromType)>
        [<type(ctx.sizeType)>]
    <elseif(ctx.sizeFromExpression)>
        [<expression(ctx.sizeExpression)>]
    <endif>
%>
