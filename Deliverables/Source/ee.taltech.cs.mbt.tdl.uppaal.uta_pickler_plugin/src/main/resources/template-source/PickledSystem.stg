systemFactory(packageName, ctx) ::= <<
package <packageName>;

import ee.taltech.cs.mbt.tdl.commons.utils.collections.CollectionUtils;

import ee.taltech.cs.mbt.tdl.uppaal.uta_system_model.language_model.system.SystemDefinition;
<ctx.imports:{importPath|import <importPath>}; separator=";\n">

public class <ctx.name>SystemFactory {
    private <ctx.name>SystemFactory() { }

    public static <ctx.name>SystemFactory new<ctx.name>SystemFactory() {
        return new <ctx.name>SystemFactory();
    }

    public <ctx.name>SystemFactory() { }

    <ctx.globalDeclarations:globalDeclarationGetter(); separator="\n">

    <ctx.templates:templateGetter(); separator="\n">

    <systemDefinitionGetter(ctx.systemDefinition)>

    public UtaSystem new<ctx.name>System() {
        UtaSystem <ctx.name> = new UtaSystem();

        // Add global declarations
        <ctx.globalDeclarations:{declCtx|<globalDeclarationConsumer(ctx.name, declCtx)>}; separator="\n">

        // Add templates
        <ctx.templates:{templateCtx|<templateConsumer(ctx.name, templateCtx)>}; separator="\n">

        // Set system definition
        <systemDefinitionConsumer(ctx.name, ctx.systemDefinition)>
        SystemDefinition systemDefinition = newSystemDefinition();
        <ctx.name>.setSystemDefinition(systemDefinition);

        return <ctx.name>;
    }
}
>>

globalDeclarationGetter(ctx) ::= <<
protected AbsDeclarationStatement new<ctx.name>GlobalDeclaration() {
    <declarationBuilder(ctx)>
}
>>

globalDeclarationConsumer(systemVar, ctx) ::= <<
CollectionUtils.addIfNonNull(<systemVar>.getDeclarations(), new<ctx.name>GlobalDeclaration());
>>

templateGetter(ctx) ::= <<
protected Template new<ctx.name>Template() {
    // TODO
    Template <ctx.name> = new Template();
    // Set declarations
    // Set locations (id, name, exit policy, color, coordinates, labels)
    // Set transitions (labels, nails)
    return <ctx.name>;
}
>>

templateConsumer(systemVar, ctx) ::= <<
CollectionUtils.addIfNonNull(<systemVar>.getTemplates(), new<ctx.name>Template());
>>

systemDefinitionGetter(ctx) ::= <<
protected SystemDefinition newSystemDefinition() {
    // TODO
}
>>

declarationBuilder(ctx) ::= <<
    // TODO
>>

expressionBuilder(ctx) ::= <<
    // TODO
>>
